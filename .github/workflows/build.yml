name: Build PX4/Pymavlink

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - main

jobs:
  px4-build:
    runs-on: ubuntu-latest
    if: "${{ !contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'px4 skip') }}"

    strategy:
      matrix:
        px4_target:
          - "px4_fmu-v5x_default" # pixhawk v5X
          - "px4_fmu-v6c_default" # pixhawk v6c
          - "px4_fmu-v6x_default" # pixhawk v6x
          # - "nxp_fmuk66-v3_default" # NXP

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache PX4
        uses: actions/cache@v3
        with:
          path: build
          # can't run hashfiles on the build directory because the contents change
          key: px4-firmware-${{ hashFiles('.px4-version') }}-${{ hashFiles('patches/**') }}-${{ hashFiles('bell.xml') }}-${{ matrix.px4_target }}
          # changing PX4 version requires a full re-checkout

          # prefer cache from firmware because stuff is precompiled,
          # but accept pymavlink since it at least has the git clone
          restore-keys: |
            px4-firmware-${{ hashFiles('.px4-version') }}-${{ hashFiles('patches/**') }}-${{ hashFiles('bell.xml') }}
            px4-firmware-${{ hashFiles('.px4-version') }}-${{ hashFiles('patches/**') }}
            px4-firmware-${{ hashFiles('.px4-version') }}
            px4-pymavlink-${{ hashFiles('.px4-version') }}-${{ hashFiles('patches/**') }}-${{ hashFiles('bell.xml') }}
            px4-pymavlink-${{ hashFiles('.px4-version') }}-${{ hashFiles('patches/**') }}
            px4-pymavlink-${{ hashFiles('.px4-version') }}

      - name: Get Short SHA
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build PX4 Firmware
        uses: devcontainers/ci@v0.3
        with:
          runCmd: vtr build-px4 --targets ${{ matrix.px4_target }}

      - name: Upload PX4 Artifact
        if: github.event_name != 'push'
        uses: actions/upload-artifact@v4
        with:
          name: PX4 ${{ matrix.px4_target }} Firmware
          path: dist/*.px4

      - name: Create Release
        if: github.event_name != 'pull_request'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.SHORT_SHA }}
          files: |
            dist/*.px4
            AVR.params

  pymavlink-build:
    runs-on: ubuntu-latest
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
      contents: write

    if: "${{ !contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'pymavlink skip') }}"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache PX4
        uses: actions/cache@v3
        with:
          path: build
          key: px4-pymavlink-${{ hashFiles('.px4-version') }}-${{ hashFiles('patches/**') }}-${{ hashFiles('bell.xml') }}
          restore-keys: |
            px4-pymavlink-${{ hashFiles('.px4-version') }}-${{ hashFiles('patches/**') }}
            px4-pymavlink-${{ hashFiles('.px4-version') }}
            px4-firmware-${{ hashFiles('.px4-version') }}-${{ hashFiles('patches/**') }}
            px4-firmware-${{ hashFiles('.px4-version') }}

      - name: Build Pymavlink Package
        uses: devcontainers/ci@v0.3
        with:
          runCmd: vtr build-pymavlink

      - name: Publish Package to PyPI
        if: github.event_name != 'pull_request'
        uses: pypa/gh-action-pypi-publish@release/v1
